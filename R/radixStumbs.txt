uint16_t * RadixSort(uint16_t * a, size_t count) {
  size_t mIndex[2][256] = {0};            // count / index matrix
  uint16_t * b = new uint16_t [count];    // allocate temp array
  size_t i,j,m,n;
  uint16_t u;
  for(i = 0; i < count; i++){         // generate histograms
    u = a[i];
    for(j = 0; j < 2; j++){
      mIndex[j][(size_t)(u & 0xff)]++;
      u >>= 8;
    }       
  }
  for(j = 0; j < 2; j++){             // convert to indices
    m = 0;
    for(i = 0; i < 256; i++){
      n = mIndex[j][i];
      mIndex[j][i] = m;
      m += n;
    }       
  }
  for(j = 0; j < 2; j++){             // radix sort
    for(i = 0; i < count; i++){     //  sort by current lsb
      u = a[i];
      m = (size_t)(u>>(j<<3))&0xff;
      b[mIndex[j][m]++] = u;
    }
    std::swap(a, b);                //  swap ptrs
  }
  delete[] b;
  return(a);
}



typedef std::mt19937 MyRNG2;  // the Mersenne Twister with a popular choice of parameters
uint32_t seed_val;           // populate somehow
MyRNG2 rng2;                   // e.g. keep one global instance (per thread)
void initialize() {
  rng2.seed(seed_val);
}
std::uniform_int_distribution<uint32_t> uint_dist2;

iota(radVec.begin(),radVec.end(),0);
radVec.print();
shuffle(radVec.begin(),radVec.end(),rng2);
radVec.print();



iota(radVec.begin(),radVec.end(),0);
random_shuffle(radVec.begin(),radVec.end(),rng2);
radVec.print();
RadixSort(radTest.get_col_p(0),50);
radVec.print();

error("stop here");



      //use recursive if less than minimal index
                    if(false &&tnode[i_depth].n<p_minimal_index && i_depth>=p_depth-2) {
                        
                        //convert bool index to int index
                        uint16_t j = 0;
                        for(auto& i : seg) {
                            while(!in_parent[j]) {j++;}
                            i = j;
                        }

                        grow_node(seg.begin(),seg.end(),tnode[i_depth].nodep,uint16_t(i_depth));
                        
                        i_depth--;
                    }